@model LMS.ViewModels.BookFormViewModel
@{
    ViewBag.Title = "Edit Book";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    // if i rename the controller or the action i don't have to do it here too
    var action = nameof(LMS.Controllers.BooksController.Update);
    var controller = nameof(LMS.Models.Book) + "s";
}

<h2>Edit Book</h2>

@using (Html.BeginForm(action, controller))
{
    <div class="form-group">
        @Html.LabelFor(m => m.Book.Title)
        @Html.TextBoxFor(m => m.Book.Title, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Book.Title, "Title is Required and must be 3-400 Length", new { @class = "text-danger" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Book.Authors)
        @Html.TextBoxFor(m => m.Book.Authors, new { @class = "form-control" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Book.Isbn)
        @Html.TextBoxFor(m => m.Book.Isbn, new { @class = "form-control" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Book.Price)
        @Html.TextBoxFor(m => m.Book.Price, new { @class = "form-control", type = "number" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Book.NumberInStock)
        @Html.TextBoxFor(m => m.Book.NumberInStock, new { @class = "form-control", type = "number" })
        @Html.ValidationMessageFor(m => m.Book.NumberInStock, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Book.Publisher)
        @Html.TextBoxFor(m => m.Book.Publisher, new { @class = "form-control" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Book.ReleaseYear)
        @Html.TextBoxFor(m => m.Book.ReleaseYear, new { @class = "form-control", type = "number" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Book.Source)
        @Html.TextBoxFor(m => m.Book.Source, new { @class = "form-control" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Book.ClassCode)
        @Html.TextBoxFor(m => m.Book.ClassCode, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Book.ClassCode, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Book.Class)
        @Html.DropDownListFor(m => m.Book.ClassId, new SelectList(Model.Classes, "Id", "Name", Model.Book.ClassId), "", new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Book.ClassId, "Class is Required", new { @class = "text-danger" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Book.Language)
        @Html.DropDownListFor(m => m.Book.LanguageId, new SelectList(Model.Languages, "Id", "Name", Model.Book.LanguageId), "", new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Book.LanguageId, "Language is Required", new { @class = "text-danger" })
    </div>
    @Html.ValidationSummary(true, "Please Fix These Errors", new { @class="text-danger"})
    <button type="submit" class="btn btn-primary">Save</button>
    @Html.HiddenFor(m => m.Book.Id)
    @Html.HiddenFor(m => m.Book.DateAdded)
    @Html.AntiForgeryToken()
}
@Html.ActionLink("Back To List", "Index")
@*@section scripts{
        <script>
            var genres = [];// array(genre)
            var bookGenres = [];// array(int)
            @foreach(var genre in genres)
            {
            <text>
            bookGenres.push(@genre.Id);


            </text>
            }
            @foreach(var genre in Model.Genres)
            {
            <text>
            genres.push({ id:@genre.Id, name: "@genre.Name" });
            $("#Genres>option").not(function (i, e) {
                return !bookGenres.includes(parseInt(e.value));
            }).remove();
            </text>
            }
            // remove genre
            $(".posttags").on("click", "li>a>span", function (e) {
                var li = $($(e.target).parents("li"));
                var id = li.data("id");
                var newarr = bookGenres.filter(i => i != id);
                if (newarr.length != bookGenres.length) {
                    $("#Genres").append(`<option value='${id}'>${li[0].innerText.split("\n")[0]}</option>`);
                    li.remove();
                    bookGenres = newarr;

                }
            });
            // add genre
            $("#Genres").on("change", function (e) {
                var list = e.target;
                var id = parseInt(list.value);
                if (Number.isInteger(id)) {
                    var genreName = genres.find(i => i.id == id).name;
                    $(".posttags").append(`<li data-id="${id}"><a href="#" onclick="return false;">${genreName}<span>X</span></a></li>`)
                    $(`#Genres>option[value='${id}']`).remove();
                    bookGenres.push(id);
                }
            });
            var form = $("#apiform");
            form[0].onsubmit = function (e) {
                var book = {};
                book.Id = form.find("input[name='Book.Id'").val();
                book.Name = form.find("input[name='Book.Name'").val();
                book.NumberInStock = form.find("input[name='Book.NumberInStock'").val();
                book.Genres = [];
                for (var gid of bookGenres) {
                    book.Genres.push({ Id: gid, Name: "_" });
                }
                console.log(book);
                e.preventDefault();
                $.ajax({
                    url: form[0].action,
                    data: book,
                    method: "PUT",
                    success: function (a, b, c) {
                        window.location = "/books/details/" + book.Id;
                    }
                });
                return false;
            };
        </script>
    }*@